generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// ///////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////
model user {
  user_id          Int       @id @default(autoincrement())
  email            String    @unique
  password         String
  name             String
  role_id          Int
  company_id       Int?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  createdCompanies company[] @relation("CompanyCreator")
  company          company?  @relation("UserCompany", fields: [company_id], references: [company_id])
  role             role      @relation(fields: [role_id], references: [role_id])

  @@index([company_id], map: "user_company_id_fkey")
  @@index([role_id], map: "user_role_id_fkey")
}

model role {
  role_id     Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       user[]
}

model OrganizationType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  companies   company[]
}

/// ///////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////
model company {
  company_id             Int                 @id @default(autoincrement())
  companyCode            String              @unique
  name                   String
  created_by             Int
  created_at             DateTime            @default(now())
  updated_at             DateTime            @updatedAt
  organizationTypeId     Int?                @map("org_type_id")
  Function               Function[]
  buildings              building[]
  creator                user                @relation("CompanyCreator", fields: [created_by], references: [user_id])
  organizationType       OrganizationType?   @relation(fields: [organizationTypeId], references: [id])
  job                    job[]
  people                 people[]
  processes              process[]
  task                   task[]
  employees              user[]              @relation("UserCompany")

  @@index([created_by], map: "company_created_by_fkey")
  @@index([organizationTypeId], map: "company_org_type_id_fkey")
}

model people {
  people_id      Int      @id @default(autoincrement())
  company_id     Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  is_manager     Boolean  @default(false)
  job_id         Int
  people_email   String   @unique
  people_name    String
  people_phone   String?
  people_surname String
  company        company  @relation(fields: [company_id], references: [company_id])
  job            job      @relation(fields: [job_id], references: [job_id])

  @@index([company_id], map: "people_company_id_fkey")
  @@index([job_id], map: "people_job_id_fkey")
}

model building {
  building_id   Int             @id @default(autoincrement())
  buildingCode  String          @unique
  name          String
  company_id    Int
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  city          String?
  columns       Int             @default(1)
  country       String?
  rows          Int             @default(1)
  company       company         @relation(fields: [company_id], references: [company_id])
  building_cell building_cell[]
  floor         floor[]

  @@index([company_id], map: "building_company_id_fkey")
}

model building_cell {
  id          Int      @id @default(autoincrement())
  building_id Int
  row         Int
  column      Int
  type        CellType @default(EMPTY)
  building    building @relation(fields: [building_id], references: [building_id], onDelete: Cascade)

  @@unique([building_id, row, column])
}

model floor {
  floor_id    Int      @id @default(autoincrement())
  floorCode   String   @unique
  name        String
  building_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  building    building @relation(fields: [building_id], references: [building_id], onDelete: Cascade)
  room        room[]

  @@index([building_id], map: "floor_building_id_fkey")
}

model room {
  room_id    Int      @id @default(autoincrement())
  roomCode   String   @unique
  name       String
  floor_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cellType   CellType @default(EMPTY)
  column     Int
  row        Int
  floor      floor    @relation(fields: [floor_id], references: [floor_id], onDelete: Cascade)
  table      table[]

  @@unique([floor_id, row, column])
}

model table {
  table_id    Int              @id @default(autoincrement())
  tableCode   String
  name        String
  room_id     Int
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  capacity    Int              @default(1)
  orientation TableOrientation @default(HORIZONTAL)
  room        room             @relation(fields: [room_id], references: [room_id], onDelete: Cascade)
  table_job   table_job[]

  @@unique([room_id, tableCode])
}

/// ///////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////
model process {
  process_id                         Int            @id @default(autoincrement())
  company_id                         Int
  created_at                         DateTime       @default(now())
  updated_at                         DateTime       @updatedAt
  capacity_requirement_minutes       Int?
  parent_process_id                  Int?
  parent_task_id                     Int?
  process_code                       String         @unique
  process_name                       String
  process_overview                   String         @db.Text
  company                            company        @relation(fields: [company_id], references: [company_id])
  process                            process?       @relation("processToprocess", fields: [parent_process_id], references: [process_id])
  other_process                      process[]      @relation("processToprocess")
  task_process_parent_task_idTotask  task?          @relation("process_parent_task_idTotask", fields: [parent_task_id], references: [task_id])
  process_task                       process_task[]
  task_task_task_process_idToprocess task[]         @relation("task_task_process_idToprocess")

  @@index([company_id], map: "process_company_id_fkey")
  @@index([parent_process_id], map: "process_parent_process_id_fkey")
  @@index([parent_task_id], map: "process_parent_task_id_fkey")
}

model task {
  task_id                               Int            @id @default(autoincrement())
  created_at                            DateTime       @default(now())
  updated_at                            DateTime       @updatedAt
  task_capacity_minutes                 Int
  task_code                             String         @unique
  task_company_id                       Int
  task_name                             String
  task_overview                         String         @db.Text
  task_process_id                       Int?
  jobTasks                              job_task[]
  process_process_parent_task_idTotask  process[]      @relation("process_parent_task_idTotask")
  process_task                          process_task[]
  company                               company        @relation(fields: [task_company_id], references: [company_id])
  process_task_task_process_idToprocess process?       @relation("task_task_process_idToprocess", fields: [task_process_id], references: [process_id])
  task_skill                            task_skill[]

  @@index([task_company_id], map: "task_task_company_id_fkey")
  @@index([task_process_id], map: "task_task_process_id_fkey")
}

model job {
  job_id         Int         @id @default(autoincrement())
  jobCode        String      @unique
  job_level_id   Int
  company_id     Int
  createdAt      DateTime    @default(now())
  hourlyRate     Float
  maxHoursPerDay Float
  updatedAt      DateTime
  description    String      @db.Text
  function_id    Int
  name           String
  overview       String?     @db.Text
  company        company     @relation(fields: [company_id], references: [company_id])
  Function       Function    @relation(fields: [function_id], references: [function_id])
  job_level      job_level   @relation(fields: [job_level_id], references: [id])
  jobSkills      job_skill[]
  jobTasks       job_task[]
  people         people[]
  table_job      table_job[]

  @@index([job_level_id], map: "job_job_level_id_fkey")
  @@index([company_id], map: "job_company_id_fkey")
  @@index([function_id], map: "job_function_id_fkey")
}

model job_level {
  description String?
  id          Int                  @id @default(autoincrement())
  level_name  job_level_level_name @unique
  level_rank  Int?                 @unique
  jobs        job[]
}

/// ///////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////
model skill {
  name        String       @unique
  description String?
  skill_id    Int          @id @default(autoincrement())
  jobSkills   job_skill[]
  task_skill  task_skill[]
}

model job_skill {
  job_id         Int
  skill_id       Int
  skill_level_id Int
  job            job         @relation(fields: [job_id], references: [job_id])
  skill          skill       @relation(fields: [skill_id], references: [skill_id])
  skill_level    skill_level @relation(fields: [skill_level_id], references: [id])

  @@id([job_id, skill_id])
  @@index([skill_id], map: "job_skill_skill_id_fkey")
  @@index([skill_level_id], map: "job_skill_skill_level_id_fkey")
}

model job_task {
  job_id  Int
  task_id Int
  job     job  @relation(fields: [job_id], references: [job_id])
  task    task @relation(fields: [task_id], references: [task_id])

  @@id([job_id, task_id])
  @@index([task_id], map: "job_task_task_id_fkey")
}

model process_task {
  process_id Int
  task_id    Int
  order      Int
  process    process @relation(fields: [process_id], references: [process_id], onDelete: Cascade)
  task       task    @relation(fields: [task_id], references: [task_id], onDelete: Cascade)

  @@id([process_id, task_id])
  @@index([task_id], map: "process_task_task_id_fkey")
}

model skill_level {
  id          Int                    @id @default(autoincrement())
  level_name  skill_level_level_name
  description String?
  level_rank  Int?                   @unique
  job_skill   job_skill[]
  task_skill  task_skill[]
}

model table_job {
  table_id    Int
  job_id      Int
  assigned_at DateTime @default(now())
  job         job      @relation(fields: [job_id], references: [job_id], onDelete: Cascade)
  table       table    @relation(fields: [table_id], references: [table_id], onDelete: Cascade)

  @@id([table_id, job_id])
  @@index([job_id], map: "table_job_job_id_fkey")
}

model task_skill {
  task_skill_task_id  Int
  task_skill_skill_id Int
  task_skill_level_id Int
  skill_name          String
  skill_level         skill_level @relation(fields: [task_skill_level_id], references: [id])
  skill               skill       @relation(fields: [task_skill_skill_id], references: [skill_id])
  task                task        @relation(fields: [task_skill_task_id], references: [task_id])

  @@id([task_skill_task_id, task_skill_skill_id])
  @@index([task_skill_level_id], map: "task_skill_task_skill_level_id_fkey")
  @@index([task_skill_skill_id], map: "task_skill_task_skill_skill_id_fkey")
}

model Function {
  function_id        Int        @id @default(autoincrement())
  functionCode       String     @unique
  name               String
  company_id         Int
  parent_function_id Int?
  backgroundColor    String?
  overview           String?    @db.Text
  company            company    @relation(fields: [company_id], references: [company_id])
  Function           Function?  @relation("FunctionToFunction", fields: [parent_function_id], references: [function_id])
  other_Function     Function[] @relation("FunctionToFunction")
  job                job[]

  @@index([company_id], map: "Function_company_id_fkey")
  @@index([parent_function_id], map: "Function_parent_function_id_fkey")
}

enum CellType {
  EMPTY
  ELEVATOR
  STAIRS
}

enum TableOrientation {
  HORIZONTAL
  VERTICAL
}

enum skill_level_level_name {
  NOVICE
  INTERMEDIATE
  PROFICIENT
  ADVANCED
  EXPERT
}

enum job_level_level_name {
  NOVICE
  INTERMEDIATE
  PROFICIENT
  ADVANCED
  EXPERT
}
