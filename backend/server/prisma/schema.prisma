generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model building {
  building_id     Int               @id
  name            String?           @db.VarChar(45)
  company_id      Int?
  company         company?          @relation(fields: [company_id], references: [company_id], onDelete: Restrict, onUpdate: Restrict, map: "comapny_id")
  floor           floor[]
  Renamedfunction Renamedfunction[]
  process         process[]

  @@index([company_id], map: "comapny_id_idx")
}

model company {
  company_id Int        @id
  name       String?    @db.VarChar(45)
  created_by Int?
  building   building[]
  user       user?      @relation(fields: [created_by], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "created_by")
  people     people[]

  @@index([created_by], map: "created_by_idx")
}

model floor {
  floor_id    Int       @id
  building_id Int?
  rows        Int?
  columns     Int?
  building    building? @relation(fields: [building_id], references: [building_id], onDelete: Restrict, onUpdate: Restrict, map: "floor_building_id")
  room        room[]

  @@index([building_id], map: "building_id_idx")
}

/// This model has been renamed to 'Renamedfunction' during introspection, because the original name 'function' is reserved.
model Renamedfunction {
  function_id Int       @id
  building_id Int?
  name        String?   @db.VarChar(45)
  building    building? @relation(fields: [building_id], references: [building_id], onDelete: Restrict, onUpdate: Restrict, map: "function_building_id")
  job         job[]

  @@index([building_id], map: "building_id_idx")
  @@map("function")
}

model job {
  job_id          Int              @id
  function_id     Int?
  name            String?          @db.VarChar(45)
  levelid         Int?
  Renamedfunction Renamedfunction? @relation(fields: [function_id], references: [function_id], onDelete: Restrict, onUpdate: Restrict, map: "function_id")
  job_level       job_level?       @relation(fields: [levelid], references: [levelid], onDelete: Restrict, onUpdate: Restrict, map: "joblevelid")
  job_skill       job_skill[]
  job_task        job_task[]
  people          people[]

  @@index([function_id], map: "function_id_idx")
  @@index([levelid], map: "joblevelid_idx")
}

model job_level {
  levelid     Int     @id
  name        String? @db.VarChar(45)
  description String? @db.VarChar(100)
  job         job[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model job_skill {
  jobid   Int
  skillid Int
  job     job   @relation(fields: [jobid], references: [job_id], onUpdate: Restrict, map: "jobid")
  skill   skill @relation(fields: [skillid], references: [skillid], onUpdate: Restrict, map: "skillid")

  @@id([jobid, skillid])
  @@index([jobid], map: "jobid_idx")
  @@index([skillid], map: "skillid_idx")
}

model job_task {
  job_id  Int
  task_id Int
  job     job  @relation(fields: [job_id], references: [job_id], onUpdate: Restrict, map: "fk_job_task_job")
  task    task @relation(fields: [task_id], references: [task_id], onUpdate: Restrict, map: "fk_job_task_task")

  @@id([job_id, task_id])
  @@index([job_id], map: "job_id_idx")
  @@index([task_id], map: "task_id_idx")
}

model people {
  peopleid  Int      @id
  name      String?  @db.VarChar(45)
  email     String?  @db.VarChar(45)
  phone     String?  @db.VarChar(45)
  companyid Int?
  jobid     Int?
  company   company? @relation(fields: [companyid], references: [company_id], onDelete: Restrict, onUpdate: Restrict, map: "peoplecompanyid")
  job       job?     @relation(fields: [jobid], references: [job_id], onDelete: Restrict, onUpdate: Restrict, map: "peoplejobid")

  @@index([companyid], map: "peoplecompanyid_idx")
  @@index([jobid], map: "peoplejobid_idx")
}

model process {
  process_id   Int            @id
  building_id  Int?
  name         String?        @db.VarChar(45)
  description  String?        @db.VarChar(1000)
  duration     Int?
  building     building?      @relation(fields: [building_id], references: [building_id], onDelete: Restrict, onUpdate: Restrict, map: "process_building_id")
  process_task process_task[]

  @@index([building_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model process_task {
  process_id Int
  task_id    Int
  order      Int?
  process    process @relation(fields: [process_id], references: [process_id], onUpdate: Restrict, map: "process_id")
  task       task    @relation(fields: [task_id], references: [task_id], onUpdate: Restrict, map: "task_id")

  @@id([process_id, task_id])
  @@index([process_id], map: "process_id_idx")
  @@index([task_id], map: "task_id_idx")
}

model role {
  role_id     Int     @id
  name        String? @db.VarChar(45)
  description String? @db.VarChar(100)
  user        user[]
}

model room {
  room_id     Int     @id
  floor_id    Int?
  cell_row    Int?
  cell_column Int?
  floor       floor?  @relation(fields: [floor_id], references: [floor_id], onDelete: Restrict, onUpdate: Restrict, map: "floor_id")
  table       table[]

  @@index([floor_id], map: "floor_id_idx")
}

model skill {
  skillid    Int          @id
  name       String?      @db.VarChar(45)
  job_skill  job_skill[]
  task_skill task_skill[]
}

model table {
  table_id  Int     @id
  room_id   Int?
  posittion String? @db.VarChar(45)
  room      room?   @relation(fields: [room_id], references: [room_id], onDelete: Restrict, onUpdate: Restrict, map: "room_id")

  @@index([room_id], map: "room_id_idx")
}

model task {
  task_id      Int            @id
  name         String?        @db.VarChar(45)
  description  String?        @db.VarChar(1000)
  duration     Int?
  minlevel     Int?
  job_task     job_task[]
  process_task process_task[]
  task_skill   task_skill[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model task_skill {
  taskid  Int
  skillid Int
  skill   skill @relation(fields: [skillid], references: [skillid], onUpdate: Restrict, map: "skillidmapping")
  task    task  @relation(fields: [taskid], references: [task_id], onUpdate: Restrict, map: "taskidmapping")

  @@id([taskid, skillid])
  @@index([skillid], map: "skillid_idx")
  @@index([taskid], map: "taskid_idx")
}

model user {
  user_id  Int       @id
  name     String?   @db.VarChar(45)
  emai     String?   @db.VarChar(65)
  password String?   @db.VarChar(100)
  role_id  Int?
  company  company[]
  role     role?     @relation(fields: [role_id], references: [role_id], onDelete: Restrict, onUpdate: Restrict, map: "role_id")

  @@index([role_id], map: "role_id_idx")
}
